<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on IARNO</title>
    <link>/categories/go/</link>
    <description>Recent content in Go on IARNO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©2024 IARNO</copyright>
    <lastBuildDate>Sun, 28 Jul 2024 22:00:00 +0800</lastBuildDate>
    
        <atom:link href="/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang高并发singleflight防缓存击穿</title>
      <link>/article/go-singleflight/</link>
      <pubDate>Sun, 28 Jul 2024 22:00:00 +0800</pubDate>
      
      <guid>/article/go-singleflight/</guid>
      <description>&lt;p&gt;本文主要分析了 Golang 中的一个第三方库，防缓存击穿利器 singleflight，包括基本使用和源码分析。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin Bind 参数绑定</title>
      <link>/article/gin-should-binding/</link>
      <pubDate>Sat, 25 Feb 2023 21:00:37 +0800</pubDate>
      
      <guid>/article/gin-should-binding/</guid>
      <description>&lt;p&gt;这篇文章主要讲述了Gin框架中的参数绑定功能，包括Bind和ShouldBind的区别以及使用方法。Bind在出错时会返回400状态码，而ShouldBind则允许用户自定义错误码。文章还详细介绍了ShouldBind和ShouldBindJSON的使用场景，前者主要用于非GET请求的json参数绑定，后者则专门用于json参数的绑定。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin binding tag</title>
      <link>/article/binding-tag/</link>
      <pubDate>Sat, 25 Feb 2023 20:40:37 +0800</pubDate>
      
      <guid>/article/binding-tag/</guid>
      <description>&lt;p&gt;这篇文章详细介绍了在Golang中使用的各种绑定标签。包括但不限于required、unique、omitempty等，每个标签都有详细的说明和使用示例。这些标签在使用Gin框架进行数据验证时非常有用。文章还提供了一个链接，供读者进一步了解和学习这些标签的使用。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang连接mysql数据库导出csv文件</title>
      <link>/article/export-csv/</link>
      <pubDate>Sat, 25 Feb 2023 19:30:37 +0800</pubDate>
      
      <guid>/article/export-csv/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Go语言连接MySQL数据库并导出CSV文件。首先，我们需要使用sql.Open函数连接到数据库。然后，我们使用db.Query函数查询用户数据。接着，我们将查询结果添加到一个二维字符串数组中，准备写入CSV文件。最后，我们调用WriteCsv函数将数据写入CSV文件。这个函数首先创建一个新的文件，然后使用csv.NewWriter创建一个新的CSV writer，最后将数据写入文件并刷新writer。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin proxy代理</title>
      <link>/article/gin-proxy/</link>
      <pubDate>Thu, 24 Nov 2022 18:30:37 +0800</pubDate>
      
      <guid>/article/gin-proxy/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Go语言的Gin框架和httputil.NewSingleHostReverseProxy方法实现代理服务。文章提供了详细的代码示例，展示了如何创建一个反向代理，将请求转发到指定的远程服务器。同时，文章还解释了如何设置请求的头部、主机、URL方案和路径等信息。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin当请求对象为数组时，binding不生效问题解决</title>
      <link>/article/gin-binding/</link>
      <pubDate>Thu, 24 Nov 2022 18:30:37 +0800</pubDate>
      
      <guid>/article/gin-binding/</guid>
      <description>&lt;p&gt;这篇文章主要解决了在使用Go语言的gin框架进行请求绑定时，如果请求对象为数组，绑定可能不会生效的问题。文章首先展示了问题的产生，然后提供了解决方案：在数组类型的绑定标签中，将required改为dive。这样，gin就会递归验证数组中的每一个对象。最后，文章提供了相关的参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Gomonkey测试框架</title>
      <link>/article/gomonkey/</link>
      <pubDate>Mon, 27 Jun 2022 22:25:37 +0800</pubDate>
      
      <guid>/article/gomonkey/</guid>
      <description>&lt;p&gt;这篇文章介绍了Golang的单元测试工具Gomonkey。Gomonkey支持为函数、成员方法、函数变量、接口和全局变量打桩。文章详细展示了如何使用Gomonkey进行单元测试，并列出了可能导致打桩失败的原因。同时，文章还解释了什么是内联，并展示了如何禁用内联进行测试。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>GoConvey测试框架</title>
      <link>/article/goconvey/</link>
      <pubDate>Mon, 27 Jun 2022 21:58:37 +0800</pubDate>
      
      <guid>/article/goconvey/</guid>
      <description>&lt;p&gt;这篇文章介绍了GoConvey测试框架的使用。GoConvey是一款针对Golang的测试框架，可以管理和运行测试用例，提供丰富的断言函数，并支持Web界面特性。文章详细介绍了如何安装GoConvey，如何编写测试用例，并展示了测试用例的执行结果。同时，文章还提供了一些编写测试用例的建议和参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang json 性能分析</title>
      <link>/article/golang-json/</link>
      <pubDate>Wed, 22 Jun 2022 21:45:37 +0800</pubDate>
      
      <guid>/article/golang-json/</guid>
      <description>&lt;p&gt;这篇文章主要分析了Go语言中不同JSON库的性能。作者测试了ffjson、easyjson、jsoniter、codecjson和jsonparser等库，结果显示easyjson在序列化和反序列化方面表现最优，性能提升显著。jsoniter性能也很好，且100%兼容原生库。ffjson和codecjson的性能提升不明显，而jsonparser并不适合这样的场景。作者建议在追求极致性能时考虑使用easyjson，否则使用jsoniter。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang benchmark 性能测试</title>
      <link>/article/benchmark/</link>
      <pubDate>Wed, 22 Jun 2022 21:33:37 +0800</pubDate>
      
      <guid>/article/benchmark/</guid>
      <description>&lt;p&gt;这篇文章详述了Go语言的benchmark性能测试的使用方法和解析。它详细阐述了go test命令的参数及其作用，并通过一个实例展示了如何进行性能测试和结果分析。文章还介绍了如何利用pprof进行性能分析，并提供了相关的参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Gin pprof性能分析</title>
      <link>/article/pprof/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:37 +0800</pubDate>
      
      <guid>/article/pprof/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Gin pprof进行Go语言的性能分析。首先，通过导入github.com/DeanThompson/ginpprof包并使用ginpprof.Wrapper(router)将其集成到gin框架中。然后，通过命令行工具go tool pprof获取和分析程序的性能数据。文章还提供了如何使用top命令查看当前内存使用情况，并建议定期使用此命令以检测是否存在内存持续增长的情况。最后，文章提供了两个参考链接，供读者深入学习。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Go grpc案例</title>
      <link>/article/grpc/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:28 +0800</pubDate>
      
      <guid>/article/grpc/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go中使用gRPC。首先，它解释了如何在.proto文件中定义服务，并使用protocol buffer编译器生成客户端和服务端代码。然后，它详细介绍了如何安装gRPC包，设置环境变量，以及如何创建gRPC服务器和客户端。最后，它提供了一个完整的gRPC示例代码，并提供了代码的GitHub链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang 协程异步请求</title>
      <link>/article/sync_wait_group/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:18 +0800</pubDate>
      
      <guid>/article/sync_wait_group/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go语言中使用协程进行异步请求。文章首先解释了协程是Go语言中的轻量级线程实现，由Go运行时管理。然后，通过一个示例展示了如何使用sync.WaitGroup来同步多个协程。示例中，我们创建了两个协程，每个协程都会调用getData()函数并将结果存储在rel映射中。最后，我们等待所有协程完成，然后打印rel映射的内容。运行结果显示，两个协程都成功地获取了数据并存储在rel映射中。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>通过图片url获取图片尺寸大小</title>
      <link>/article/image-url-size/</link>
      <pubDate>Wed, 28 Oct 2020 22:37:06 +0800</pubDate>
      
      <guid>/article/image-url-size/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何通过Go语言获取图片URL的尺寸大小。首先，我们需要导入image/gif，image/jpeg，image/png这三个包，以便解码不同格式的图片。然后，我们使用http.Get方法获取图片，使用image.Decode解码图片，最后通过m.Bounds().Dx()，m.Bounds().Dy()和m.Bounds().Size()获取图片的宽度、高度和尺寸。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang excel导出</title>
      <link>/article/golang-excel%E5%AF%BC%E5%87%BA/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/golang-excel%E5%AF%BC%E5%87%BA/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Golang进行Excel文件的导出。它详细解释了如何使用excelize库创建一个新的Excel文件，并设置单元格的值。然后，它展示了如何将这个Excel文件作为一个下载响应发送给客户端。文章还提供了相关的Github和文档链接，供读者进一步学习和探索。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang 蓄水池抽样法</title>
      <link>/article/golang-%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E6%B3%95/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/golang-%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E6%B3%95/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go语言中实现蓄水池抽样法。蓄水池抽样法是一种等概率随机抽取的方法，适用于从大量数据中抽取样本。文章首先构建了一个可以放置m个元素的蓄水池，然后将前m个数依次放入。从第m+1个元素开始，以m/n的概率决定元素是否被替换到池子中。当遍历完所有元素后，就可以得出随机挑选的k个元素。该方法的时间复杂度为O(n)。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>supervisor管理golang程序</title>
      <link>/article/supervisor%E7%AE%A1%E7%90%86golang%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/supervisor%E7%AE%A1%E7%90%86golang%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;最近在鼓捣golang守护进程的实现，无意发现了supervisor这个有意思的东西。supervisor是一个unix的系统进程管理软件，可以用它来管理apache、nginx等服务，若服务挂了可以让它们自动重启。当然也可以用来实现golang的守护进程，下面描述下具体实现。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
