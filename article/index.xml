<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Articles on IARNO</title>
    <link>/article/</link>
    <description>Recent content in Articles on IARNO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©2023 IARNO</copyright>
    <lastBuildDate>Tue, 31 Oct 2023 22:00:00 +0800</lastBuildDate>
    
        <atom:link href="/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用cURL获得请求和响应时间</title>
      <link>/article/curl/</link>
      <pubDate>Tue, 31 Oct 2023 22:00:00 +0800</pubDate>
      
      <guid>/article/curl/</guid>
      <description>&lt;p&gt;Stable Diffusion是一个文本到图像的潜在扩散模型，由CompVis、Stability AI和LAION的研究人员和工程师创建。它使用来自LAION-5B数据库子集的512x512图像进行训练。使用这个模型，可以生成包括人脸在内的任何图像，因为有开源的预训练模型，所以我们也可以在自己的机器上运行它。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang数据库连接池参数设置</title>
      <link>/article/golang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 14 Jul 2023 20:47:20 +0800</pubDate>
      
      <guid>/article/golang%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Golang数据库连接池的四个参数：maxOpenConns、maxIdleConns、maxIdleTime、maxLifeTime的设置和使用。其中，maxOpenConns是连接池最多同时打开的连接数，maxIdleConns是连接池里最大空闲连接数，maxIdleTime是连接池里面的连接最大空闲时长，maxLifeTime是连接池里面的连接最大存活时长。文章还详细解释了这些参数的设置原则和注意事项。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>stable diffusion webui 安装</title>
      <link>/article/stable-diffusion/</link>
      <pubDate>Sun, 16 Apr 2023 16:00:37 +0800</pubDate>
      
      <guid>/article/stable-diffusion/</guid>
      <description>&lt;p&gt;Stable Diffusion是一个文本到图像的潜在扩散模型，由CompVis、Stability AI和LAION的研究人员和工程师创建。它使用来自LAION-5B数据库子集的512x512图像进行训练。使用这个模型，可以生成包括人脸在内的任何图像，因为有开源的预训练模型，所以我们也可以在自己的机器上运行它。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>centos搭建apisix网关</title>
      <link>/article/apisix/</link>
      <pubDate>Sun, 02 Apr 2023 20:40:37 +0800</pubDate>
      
      <guid>/article/apisix/</guid>
      <description>&lt;p&gt;Apache APISIX 是 Apache 软件基金会下的云原生 API 网关，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、服务熔断、身份认证、可观测性等丰富的流量管理功能。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>centos搭建etcd集群</title>
      <link>/article/etcd/</link>
      <pubDate>Sat, 01 Apr 2023 20:40:37 +0800</pubDate>
      
      <guid>/article/etcd/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在CentOS系统上搭建etcd集群。首先，文章详细解释了etcd的特点和相关概念。然后，文章通过实例详细介绍了如何在三个节点上安装etcd，包括初始化节点和新增节点。最后，文章还介绍了如何移除节点。文章的内容详细且实用，对于需要在CentOS系统上搭建etcd集群的读者来说非常有帮助。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin Bind 参数绑定</title>
      <link>/article/gin-should-binding/</link>
      <pubDate>Sat, 25 Feb 2023 21:00:37 +0800</pubDate>
      
      <guid>/article/gin-should-binding/</guid>
      <description>&lt;p&gt;这篇文章主要讲述了Gin框架中的参数绑定功能，包括Bind和ShouldBind的区别以及使用方法。Bind在出错时会返回400状态码，而ShouldBind则允许用户自定义错误码。文章还详细介绍了ShouldBind和ShouldBindJSON的使用场景，前者主要用于非GET请求的json参数绑定，后者则专门用于json参数的绑定。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin binding tag</title>
      <link>/article/binding-tag/</link>
      <pubDate>Sat, 25 Feb 2023 20:40:37 +0800</pubDate>
      
      <guid>/article/binding-tag/</guid>
      <description>&lt;p&gt;这篇文章详细介绍了在Golang中使用的各种绑定标签。包括但不限于required、unique、omitempty等，每个标签都有详细的说明和使用示例。这些标签在使用Gin框架进行数据验证时非常有用。文章还提供了一个链接，供读者进一步了解和学习这些标签的使用。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>mysql join、inner join、left join 、right join 详解</title>
      <link>/article/mysql-join/</link>
      <pubDate>Sat, 25 Feb 2023 20:30:37 +0800</pubDate>
      
      <guid>/article/mysql-join/</guid>
      <description>&lt;p&gt;这篇文章详细解释了MySQL中的join、inner join、left join和right join的用法。通过实例展示了如何在两张表之间进行有效连接，以及如何使用左连接和右连接来处理不存在的数据。文章还包含了一些实用的MySQL命令和查询结果，以帮助读者更好地理解这些概念。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>golang连接mysql数据库导出csv文件</title>
      <link>/article/export-csv/</link>
      <pubDate>Sat, 25 Feb 2023 19:30:37 +0800</pubDate>
      
      <guid>/article/export-csv/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Go语言连接MySQL数据库并导出CSV文件。首先，我们需要使用sql.Open函数连接到数据库。然后，我们使用db.Query函数查询用户数据。接着，我们将查询结果添加到一个二维字符串数组中，准备写入CSV文件。最后，我们调用WriteCsv函数将数据写入CSV文件。这个函数首先创建一个新的文件，然后使用csv.NewWriter创建一个新的CSV writer，最后将数据写入文件并刷新writer。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin proxy代理</title>
      <link>/article/gin-proxy/</link>
      <pubDate>Thu, 24 Nov 2022 18:30:37 +0800</pubDate>
      
      <guid>/article/gin-proxy/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Go语言的Gin框架和httputil.NewSingleHostReverseProxy方法实现代理服务。文章提供了详细的代码示例，展示了如何创建一个反向代理，将请求转发到指定的远程服务器。同时，文章还解释了如何设置请求的头部、主机、URL方案和路径等信息。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>gin当请求对象为数组时，binding不生效问题解决</title>
      <link>/article/gin-binding/</link>
      <pubDate>Thu, 24 Nov 2022 18:30:37 +0800</pubDate>
      
      <guid>/article/gin-binding/</guid>
      <description>&lt;p&gt;这篇文章主要解决了在使用Go语言的gin框架进行请求绑定时，如果请求对象为数组，绑定可能不会生效的问题。文章首先展示了问题的产生，然后提供了解决方案：在数组类型的绑定标签中，将required改为dive。这样，gin就会递归验证数组中的每一个对象。最后，文章提供了相关的参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Django 项目实践01</title>
      <link>/article/django-01/</link>
      <pubDate>Wed, 24 Aug 2022 22:31:37 +0800</pubDate>
      
      <guid>/article/django-01/</guid>
      <description>&lt;p&gt;这篇文章是关于Django项目实践的教程。首先，我们介绍了如何安装Django。然后，我们创建了一个新的Django项目，并进行了数据库的初始化。接着，我们启动了Django服务，并展示了如何在浏览器中查看项目。最后，我们创建了一个新的应用程序，并定义了一个简单的模型。这篇文章是对Django项目实践的基础介绍，适合初学者阅读。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python 单元测试</title>
      <link>/article/py-test/</link>
      <pubDate>Wed, 06 Jul 2022 23:09:37 +0800</pubDate>
      
      <guid>/article/py-test/</guid>
      <description>&lt;p&gt;这篇文章是关于Python单元测试的教程。文章首先介绍了Python代码测试的重要性，然后详细解释了如何使用Python的unittest模块进行单元测试。文章中还提供了一个简单的单元测试示例，包括如何创建测试类，如何编写测试方法，以及如何使用断言进行测试。这篇文章对于想要学习Python单元测试的读者来说是非常有帮助的。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Cloc 代码统计</title>
      <link>/article/cloc/</link>
      <pubDate>Wed, 06 Jul 2022 21:49:37 +0800</pubDate>
      
      <guid>/article/cloc/</guid>
      <description>&lt;p&gt;本文介绍了cloc代码统计工具的安装和使用方法。cloc可以统计代码文件的数量、空行、注释和代码行数。通过执行cloc命令，可以得到详细的统计结果，包括各种语言的文件数、空行数、注释数和代码行数。这是一个非常实用的工具，可以帮助我们更好地理解和管理代码。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python 异常处理</title>
      <link>/article/py-file/</link>
      <pubDate>Mon, 04 Jul 2022 22:41:37 +0800</pubDate>
      
      <guid>/article/py-file/</guid>
      <description>&lt;p&gt;这篇文章介绍了Python的异常处理方法，主要讲解了try-except语句的使用。文章通过一个实例，展示了如何使用try-except语句来处理文件读取时可能出现的FileNotFoundError异常。当文件不存在时，程序会捕获这个异常，并打印出&amp;quot;file not found&amp;rdquo;。如果文件存在且无异常，程序会读取文件内容并打印出来。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python 文件篇</title>
      <link>/article/py-except/</link>
      <pubDate>Sun, 03 Jul 2022 20:40:37 +0800</pubDate>
      
      <guid>/article/py-except/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Python中文件的读取和写入操作。首先，通过open函数和with关键字，我们可以方便地打开文件并在不再需要时自动关闭。文章详细介绍了如何读取文件的每一行，包括如何去除空行。然后，文章展示了如何将文件的内容读取到列表中。在文件写入部分，我们学习了如何使用不同的模式（如写入模式和附加模式）来写入文件。如果文件不存在，Python会自动创建。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Conda 包管理工具</title>
      <link>/article/conda/</link>
      <pubDate>Thu, 30 Jun 2022 22:54:37 +0800</pubDate>
      
      <guid>/article/conda/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Conda包管理工具的使用，包括安装方法、设置镜像源、创建和激活环境等操作。同时，文章还解答了在使用过程中可能遇到的问题，如设置清华源问题和激活后包版本未变的问题，并给出了解决方案。最后，文章提供了一些参考链接，包括Conda的官方文档和其他相关教程。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Core 文件分析</title>
      <link>/article/core/</link>
      <pubDate>Mon, 27 Jun 2022 22:31:37 +0800</pubDate>
      
      <guid>/article/core/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Linux下的core文件分析方法。首先，文章解释了如何使用ulimit命令设置生成core文件，以及各参数的含义。接着，文章详细描述了core文件的生成过程和作用，以及如何设置core dump的文件目录和命名规则。文章还提供了如何使用gdb工具分析core文件的方法，并解释了在什么情况下可能不会生成core文件以及如何解决。最后，文章提供了相关的参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Dig 命令使用详解</title>
      <link>/article/dig/</link>
      <pubDate>Mon, 27 Jun 2022 22:28:37 +0800</pubDate>
      
      <guid>/article/dig/</guid>
      <description>&lt;p&gt;这篇文章详细介绍了如何使用 dig 命令来查询 DNS 信息。首先，它解释了如何使用 dig 命令查询单个主机的信息，然后介绍了如何从指定的 DNS 服务器上进行查询，最后，文章还讲解了如何使用 dig 的 -x 选项来反向解析 IP 地址对应的域名。文章中还包含了一些实际的命令示例和结果输出，帮助读者更好地理解和使用 dig 命令。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Gomonkey测试框架</title>
      <link>/article/gomonkey/</link>
      <pubDate>Mon, 27 Jun 2022 22:25:37 +0800</pubDate>
      
      <guid>/article/gomonkey/</guid>
      <description>&lt;p&gt;这篇文章介绍了Golang的单元测试工具Gomonkey。Gomonkey支持为函数、成员方法、函数变量、接口和全局变量打桩。文章详细展示了如何使用Gomonkey进行单元测试，并列出了可能导致打桩失败的原因。同时，文章还解释了什么是内联，并展示了如何禁用内联进行测试。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>GoConvey测试框架</title>
      <link>/article/goconvey/</link>
      <pubDate>Mon, 27 Jun 2022 21:58:37 +0800</pubDate>
      
      <guid>/article/goconvey/</guid>
      <description>&lt;p&gt;这篇文章介绍了GoConvey测试框架的使用。GoConvey是一款针对Golang的测试框架，可以管理和运行测试用例，提供丰富的断言函数，并支持Web界面特性。文章详细介绍了如何安装GoConvey，如何编写测试用例，并展示了测试用例的执行结果。同时，文章还提供了一些编写测试用例的建议和参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用tcpdump查看域名DNS解析过程</title>
      <link>/article/tcpdump-dns/</link>
      <pubDate>Wed, 22 Jun 2022 21:52:37 +0800</pubDate>
      
      <guid>/article/tcpdump-dns/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用tcpdump工具抓取和分析域名DNS解析过程。首先，使用tcpdump命令启动对DNS报文的抓包。然后，使用host命令进行DNS查询。最后，分析tcpdump的输出结果，解读DNS查询和应答报文的内容。文章还提到了如何使用tcpdump的-X选项以16进制和ASCII方式打印报文内容，以及如何将抓到的数据包写入到文件中，然后导入到Wireshark中查看。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang json 性能分析</title>
      <link>/article/golang-json/</link>
      <pubDate>Wed, 22 Jun 2022 21:45:37 +0800</pubDate>
      
      <guid>/article/golang-json/</guid>
      <description>&lt;p&gt;这篇文章主要分析了Go语言中不同JSON库的性能。作者测试了ffjson、easyjson、jsoniter、codecjson和jsonparser等库，结果显示easyjson在序列化和反序列化方面表现最优，性能提升显著。jsoniter性能也很好，且100%兼容原生库。ffjson和codecjson的性能提升不明显，而jsonparser并不适合这样的场景。作者建议在追求极致性能时考虑使用easyjson，否则使用jsoniter。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang benchmark 性能测试</title>
      <link>/article/benchmark/</link>
      <pubDate>Wed, 22 Jun 2022 21:33:37 +0800</pubDate>
      
      <guid>/article/benchmark/</guid>
      <description>&lt;p&gt;这篇文章详述了Go语言的benchmark性能测试的使用方法和解析。它详细阐述了go test命令的参数及其作用，并通过一个实例展示了如何进行性能测试和结果分析。文章还介绍了如何利用pprof进行性能分析，并提供了相关的参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Maven 安装使用</title>
      <link>/article/maven/</link>
      <pubDate>Mon, 25 Apr 2022 21:24:37 +0800</pubDate>
      
      <guid>/article/maven/</guid>
      <description>&lt;p&gt;本文主要介绍了Maven的安装和使用，包括项目构建、依赖管理等。首先，我们需要下载并配置Maven，然后通过pom.xml文件进行项目管理。文章详细解释了如何使用Maven创建Java应用，以及如何构建和测试项目。最后，我们学习了如何执行jar包，包括pom.xml文件中需要引入的assembly插件和执行命令。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Hadoop 环境搭建（一）</title>
      <link>/article/hadoop%E6%90%AD%E5%BB%BA%E4%B8%80/</link>
      <pubDate>Thu, 21 Apr 2022 15:21:37 +0800</pubDate>
      
      <guid>/article/hadoop%E6%90%AD%E5%BB%BA%E4%B8%80/</guid>
      <description>&lt;p&gt;这篇文章是关于如何在ECS实例上快速搭建Hadoop伪分布式环境的教程。主要步骤包括安装JDK，安装Hadoop，配置Hadoop，配置SSH免密登录，以及启动Hadoop。每个步骤都有详细的命令和操作说明，以及相关的参考链接。完成所有步骤后，可以通过访问特定的URL来验证Hadoop环境是否已成功搭建。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python 列表</title>
      <link>/article/py_list/</link>
      <pubDate>Wed, 02 Mar 2022 09:38:37 +0800</pubDate>
      
      <guid>/article/py_list/</guid>
      <description>&lt;p&gt;这篇文章是关于Python列表的详细教程。它首先介绍了如何访问和修改列表元素，然后讲解了如何在列表末尾添加元素和在列表中插入元素。接着，文章详细解释了如何使用del和pop()方法根据索引删除元素，以及如何根据值删除元素。文章还介绍了sort()和sorted()方法进行列表排序，以及如何倒序打印列表元素和获取列表长度。最后，文章讲解了如何遍历整个列表，创建数值列表和数字列表，以及如何使用列表解析和列表切片。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python 变量和简单数据类型</title>
      <link>/article/py_string/</link>
      <pubDate>Mon, 28 Feb 2022 10:46:37 +0800</pubDate>
      
      <guid>/article/py_string/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Python中的变量和简单数据类型，包括字符串、整数、浮点数和常量。在字符串部分，文章详细解释了如何使用方法修改字符串中的大小写，如何在字符串中使用变量，如何使用制表符和换行符添加空格，以及如何删除字符串两端的特殊字符。在数字部分，文章讲解了整数和浮点数的基本操作，以及如何在数字中使用下划线。此外，文章还介绍了如何给多个变量赋值，以及如何定义常量。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>LVS &#43; Keepalived实现集群高可用</title>
      <link>/article/lvs-2/</link>
      <pubDate>Fri, 17 Sep 2021 22:00:00 +0800</pubDate>
      
      <guid>/article/lvs-2/</guid>
      <description>&lt;p&gt;本文详细介绍了如何使用LVS和Keepalived实现集群高可用。首先，我们在LVS服务器上安装ipvsadm和keepalived服务，然后在WEB服务器上安装nginx服务并配置index.html文件。接着，我们在LVS服务器上配置keepalived.conf文件和RS服务，最后通过访问VIP来验证配置的正确性。整个过程中，我们详细解释了每一步的操作和配置的含义，帮助读者更好地理解和实践。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>LVS负载均衡实践</title>
      <link>/article/lvs-1/</link>
      <pubDate>Thu, 16 Sep 2021 23:00:00 +0800</pubDate>
      
      <guid>/article/lvs-1/</guid>
      <description>&lt;p&gt;这篇文章详细介绍了如何使用LVS进行负载均衡的实践操作。首先，文章列出了所需的服务器IP和角色，然后分别介绍了在LVS服务器和WEB服务器上的配置步骤。在LVS服务器上，主要是安装ipvsadm，配置VIP网卡和使用ipvsadm配置VIP。在WEB服务器上，主要是安装nginx服务，配置index.html文件，修改arp_ignore和arp_announce配置，以及环回接口配置VIP。最后，文章展示了如何在LVS服务器上添加rs，以及如何访问VIP。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Mac 安装VM虚拟机及网络配置</title>
      <link>/article/mac-vm/</link>
      <pubDate>Sat, 11 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/article/mac-vm/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在Mac上安装VM虚拟机和Centos虚拟机，并进行网络配置。首先，从VMware官网下载并安装VMware Fusion。然后，从Centos官网下载Centos镜像，并在VMware Fusion中创建Centos虚拟机。最后，进行虚拟机网络配置，包括选择网络模式，查看WIFI项，配置虚拟机的ifcfg-ens33文件，设置GATEWAY和DNS，最后重启network服务。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kong - 自定义插件开发(四)</title>
      <link>/article/plugin-dev4/</link>
      <pubDate>Thu, 15 Jul 2021 21:10:57 +0800</pubDate>
      
      <guid>/article/plugin-dev4/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何使用Go语言开发自定义插件。首先，我们需要下载并安装go-pluginserver，然后在CentOS环境下安装C相关的编译环境。接着，我们可以下载官方的插件示例，并通过Go语言编写自己的插件。最后，我们需要配置相关的环境变量并启动Kong服务。文章还提供了Konga插件的示例图和相关参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kong - 自定义插件开发(三)</title>
      <link>/article/plugin-dev3/</link>
      <pubDate>Wed, 14 Jul 2021 21:10:57 +0800</pubDate>
      
      <guid>/article/plugin-dev3/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Docker启动Kong并加载自定义插件。详细介绍了Docker启动命令中的环境变量和挂载路径的配置。特别注意，如果出现ntt-auth plugin is in use but not enabled错误，需要检查插件路径和KONG_PLUGINS环境变量。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kong - 自定义插件开发(二)</title>
      <link>/article/plugin-dev2/</link>
      <pubDate>Tue, 13 Jul 2021 22:12:57 +0800</pubDate>
      
      <guid>/article/plugin-dev2/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在Kong中开发自定义插件。首先，它解释了Kong插件的生命周期，并展示了如何在Lua中实现base_plugin.lua接口的方法。然后，文章提供了一个NttAuthHandler插件的示例，包括access、init_worker和log阶段的实现。接着，文章介绍了如何定义插件的schema。最后，文章讨论了在Docker容器部署中如何使用lua_shared_dict共享内存，并提供了Kong Nginx模板的相关配置。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kong - 自定义插件开发(一)</title>
      <link>/article/plugin-dev1/</link>
      <pubDate>Tue, 13 Jul 2021 21:41:57 +0800</pubDate>
      
      <guid>/article/plugin-dev1/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何开发Kong自定义插件。首先，将插件视为一组Lua模块，Kong会检测并加载遵循特定命名约定的插件模块。插件由两个强制性模块组成：handler.lua和schema.lua。一些插件可能需要更深入地集成到Kong中，例如在数据库中有自己的表，或在Admin API中公开端点等，这些都可以通过向插件添加新模块来完成。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>限流算法实践</title>
      <link>/article/rate-limiting/</link>
      <pubDate>Wed, 21 Apr 2021 23:06:53 +0800</pubDate>
      
      <guid>/article/rate-limiting/</guid>
      <description>&lt;p&gt;本文主要介绍了四种限流算法：固定窗口计数器算法、滑动窗口计数算法、漏桶算法、令牌桶算法，并通过Lua脚本和Redis实现了令牌桶算法。文章详细解释了如何使用Redis的SCRIPT LOAD和EVALSHA命令来执行限流逻辑，并通过返回值判断是否触发限流行为。最后，文章对四种算法进行了比较和总结，认为令牌桶算法是一种相对完美的限流算法，适用于大多数限流场景。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>ngx_lua模块中使用lua_shared_dict共享内存变量</title>
      <link>/article/lua-shared-dict/</link>
      <pubDate>Mon, 19 Apr 2021 21:36:52 +0800</pubDate>
      
      <guid>/article/lua-shared-dict/</guid>
      <description>&lt;p&gt;本文介绍了在ngx_lua模块中如何使用lua_shared_dict命令定义共享内存字典项对象，并通过ngx.shared.DICT接口获取这些对象。文章详细解释了相关语法和示例，包括如何设置和获取共享内存上的值。同时，还讨论了在Nginx重启和退出时，共享内存字典项的行为。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>openresty 跑定时任务配置、ngx.timer.every接口使用</title>
      <link>/article/lua-timer/</link>
      <pubDate>Mon, 19 Apr 2021 21:36:52 +0800</pubDate>
      
      <guid>/article/lua-timer/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在OpenResty中配置和使用定时任务。首先，文章解释了定时任务需要与worker绑定，通常默认绑定到worker_id=0，这样在Nginx进程中只执行一个timer。然后，文章提供了在nginx.conf中配置定时任务的具体方法。接着，文章介绍了如何使用ngx.timer.every接口，这是ngx提供的最新接口。最后，文章提供了一些相关的日志输出和错误处理方法。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>too many open files 问题定位</title>
      <link>/article/lsof/</link>
      <pubDate>Wed, 17 Mar 2021 22:10:00 +0800</pubDate>
      
      <guid>/article/lsof/</guid>
      <description>&lt;p&gt;这篇文章主要解决了&amp;quot;too many open files&amp;quot;问题的定位。首先，它列出了可能的问题原因，包括系统资源限制小，数据库打开文件限制小，以及程序代码问题。然后，文章详细介绍了如何使用ulimit命令查看和调整资源限制，特别是打开文件数的限制。最后，文章介绍了如何使用lsof命令查看打开文件数，包括查看某个进程打开文件数和查看当前系统打开文件数。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Gin pprof性能分析</title>
      <link>/article/pprof/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:37 +0800</pubDate>
      
      <guid>/article/pprof/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Gin pprof进行Go语言的性能分析。首先，通过导入github.com/DeanThompson/ginpprof包并使用ginpprof.Wrapper(router)将其集成到gin框架中。然后，通过命令行工具go tool pprof获取和分析程序的性能数据。文章还提供了如何使用top命令查看当前内存使用情况，并建议定期使用此命令以检测是否存在内存持续增长的情况。最后，文章提供了两个参考链接，供读者深入学习。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Go grpc案例</title>
      <link>/article/grpc/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:28 +0800</pubDate>
      
      <guid>/article/grpc/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go中使用gRPC。首先，它解释了如何在.proto文件中定义服务，并使用protocol buffer编译器生成客户端和服务端代码。然后，它详细介绍了如何安装gRPC包，设置环境变量，以及如何创建gRPC服务器和客户端。最后，它提供了一个完整的gRPC示例代码，并提供了代码的GitHub链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang 协程异步请求</title>
      <link>/article/sync_wait_group/</link>
      <pubDate>Mon, 28 Dec 2020 19:46:18 +0800</pubDate>
      
      <guid>/article/sync_wait_group/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go语言中使用协程进行异步请求。文章首先解释了协程是Go语言中的轻量级线程实现，由Go运行时管理。然后，通过一个示例展示了如何使用sync.WaitGroup来同步多个协程。示例中，我们创建了两个协程，每个协程都会调用getData()函数并将结果存储在rel映射中。最后，我们等待所有协程完成，然后打印rel映射的内容。运行结果显示，两个协程都成功地获取了数据并存储在rel映射中。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>centos7安装Postgresql</title>
      <link>/article/postgresql-centos/</link>
      <pubDate>Tue, 17 Nov 2020 22:22:01 +0800</pubDate>
      
      <guid>/article/postgresql-centos/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何使用Go语言开发自定义插件。首先，我们需要下载并安装go-pluginserver，然后在CentOS环境下安装C相关的编译环境。接着，我们可以下载官方的插件示例，并通过Go语言编写自己的插件。最后，我们需要配置相关的环境变量并启动Kong服务。文章还提供了Konga插件的示例图和相关参考链接。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>centos7 安装kong网关</title>
      <link>/article/kong-centos/</link>
      <pubDate>Sat, 14 Nov 2020 21:19:05 +0800</pubDate>
      
      <guid>/article/kong-centos/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在CentOS 7上安装和配置Kong网关。首先，提供了Kong安装包的下载链接，然后详细说明了如何使用YUM命令进行安装。接着，文章介绍了如何准备PostgreSQL数据库，并给出了创建用户和数据库的命令。然后，文章描述了如何配置Kong的数据库连接，并提供了相关的命令。最后，文章介绍了如何启动、检查和停止Kong服务。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>通过图片url获取图片尺寸大小</title>
      <link>/article/image-url-size/</link>
      <pubDate>Wed, 28 Oct 2020 22:37:06 +0800</pubDate>
      
      <guid>/article/image-url-size/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何通过Go语言获取图片URL的尺寸大小。首先，我们需要导入image/gif，image/jpeg，image/png这三个包，以便解码不同格式的图片。然后，我们使用http.Get方法获取图片，使用image.Decode解码图片，最后通过m.Bounds().Dx()，m.Bounds().Dy()和m.Bounds().Size()获取图片的宽度、高度和尺寸。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kong网关配置负载均衡</title>
      <link>/article/upstream/</link>
      <pubDate>Tue, 27 Oct 2020 23:37:50 +0800</pubDate>
      
      <guid>/article/upstream/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何配置Kong网关进行负载均衡。首先，文章提供了两个微服务接口用于测试。然后，通过Konga和Kong Admin API两种方式分别进行了详细的配置步骤说明。在Konga部分，包括了如何配置upstream、Service发布、Route匹配规则以及验证结果。在Kong Admin API部分，也包括了如何配置upstream、service和route。最后，文章提供了通过浏览器和命令行API进行测试的方法。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>宽带、带宽、流量、网速、内网、外网之间的区别</title>
      <link>/article/network/</link>
      <pubDate>Sun, 25 Oct 2020 20:00:56 +0800</pubDate>
      
      <guid>/article/network/</guid>
      <description>&lt;p&gt;这篇文章主要解释了宽带、带宽、流量、网速、内网、外网之间的区别。宽带是一种业务，带宽是传输速度。内网IP只在局域网内部具有唯一性，而公网IP具有世界范围的唯一性。文章还介绍了如何判断一个IP地址是内网IP还是公网IP，包括直观法和经验法。最后，文章提到了一些关于网络的常见误解和实际情况。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Mysql 导出Excel表</title>
      <link>/article/mysql-excel/</link>
      <pubDate>Thu, 22 Oct 2020 21:51:43 +0800</pubDate>
      
      <guid>/article/mysql-excel/</guid>
      <description>&lt;p&gt;本文介绍了如何使用MySQL命令行工具导出Excel表格或txt文件。主要通过mysql -h x.x.x.x -P 3306 -u用户名 -p密码 -e &amp;ldquo;select * from test&amp;rdquo; 数据库 &amp;gt; /tmp/test.xls这条命令实现。其中，-h代表数据库Host，-P代表数据库端口，-u代表用户名，-p代表密码，-e代表sql语句，/tmp/test.xls代表文件名。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Konga 插件使用案例</title>
      <link>/article/kong-plugins/</link>
      <pubDate>Wed, 21 Oct 2020 22:41:57 +0800</pubDate>
      
      <guid>/article/kong-plugins/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了Konga插件的使用案例，包括创建消费者、添加凭证、路由添加插件以及使用Postman发送请求等步骤。文章详细解释了如何添加Basic Auth插件，并通过图文并茂的方式展示了操作流程。同时，文章还提供了相关参考链接，供读者深入学习。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Konga使用</title>
      <link>/article/konga/</link>
      <pubDate>Fri, 16 Oct 2020 21:55:17 +0800</pubDate>
      
      <guid>/article/konga/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何使用Konga，包括安装、配置Dashboard、创建Service、配置路由以及使用Postman请求网关。文章首先提供了Konga的安装链接，然后详细解释了如何配置Dashboard，包括如何查找Kong Admin URL。接着，文章介绍了如何创建Service和配置路由，特别强调了在配置路由时，对于hosts、paths、methods等配置项需要按回车键来应用每个输入的值。最后，文章展示了如何使用Postman请求网关，包括请求的端口和Headers头的配置。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker安装Kong网关</title>
      <link>/article/docker-kong/</link>
      <pubDate>Fri, 16 Oct 2020 21:47:24 +0800</pubDate>
      
      <guid>/article/docker-kong/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何使用Docker安装Kong网关。首先，创建一个Docker网络，然后创建PostgreSQL或Cassandra数据库。接着，准备数据库并启动Kong服务。Kong服务默认监听8000、8443、8001和8444端口。验证Kong服务后，安装Konga，一个Kong的管理界面。最后，提供了几个参考链接，包括Kong的官方文档和其他相关文章。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Burp Suite使用</title>
      <link>/article/user-burp/</link>
      <pubDate>Sat, 26 Sep 2020 20:37:11 +0800</pubDate>
      
      <guid>/article/user-burp/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何使用破解版本的Burp Suite，一个多线程请求工具。首先，文章详细解释了如何启动软件，包括运行关键的burp-loader-keygen.jar文件。然后，文章逐步指导读者如何配置host，请求信息，请求数量，线程数，并执行请求。每个步骤都配有清晰的图片指导。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>MacOS安装BurpSuite并破解</title>
      <link>/article/burp/</link>
      <pubDate>Sat, 26 Sep 2020 20:16:02 +0800</pubDate>
      
      <guid>/article/burp/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在MacOS上安装并破解BurpSuite。首先，从官网下载社区版的BurpSuite，然后下载注册机。由于JDK10版本过高无法破解，需要卸载JDK10并安装JDK1.8。设置好JDK环境变量后，将注册机的文件拷贝进app目录，修改vmoptions.txt文件，运行注册机并按照指示进行破解。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>idea 破解</title>
      <link>/article/idea/</link>
      <pubDate>Tue, 08 Sep 2020 21:38:21 +0800</pubDate>
      
      <guid>/article/idea/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何破解 IntelliJ IDEA，包括 IDEA2020.2 的激活码和破解教程。文章提供了 IDEA 的下载链接和激活码的下载链接，以及如何使用 jetbrains-agent.jar 文件进行激活的步骤。请注意，这些信息仅供个人学习使用，不得用于商业用途。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>wrk压测</title>
      <link>/article/wrk/</link>
      <pubDate>Fri, 04 Sep 2020 21:04:12 +0800</pubDate>
      
      <guid>/article/wrk/</guid>
      <description>&lt;p&gt;这篇文章是关于wrk压测工具的使用指南。它首先介绍了如何安装wrk，然后详细解释了wrk的基本使用方法，包括如何查看使用帮助、版本信息，以及如何进行简单的压测。文章还介绍了如何增加header参数进行压测，以及如何压测POST接口。在每个示例后，作者都对结果进行了详细的注释和解释。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>如何测试端口通不通</title>
      <link>/article/nc/</link>
      <pubDate>Fri, 04 Sep 2020 21:04:12 +0800</pubDate>
      
      <guid>/article/nc/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用telnet和nc命令来测试端口是否开放。首先，使用telnet ip port命令来判断端口是否通，如果连接被拒绝则端口不通。然后，文章介绍了nc命令的使用，通过nc -v localhost port命令来检测端口，如果显示Connection refused则端口不通，如果显示Connection to x.x.x.x port [tcp/http] succeeded!则端口通。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Centos安装Nodejs</title>
      <link>/article/%E5%AE%89%E8%A3%85nodejs/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/%E5%AE%89%E8%A3%85nodejs/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何在Centos系统上安装Nodejs。首先，从Nodejs官网下载最新稳定版的安装包。然后，将安装包解压并移动到指定目录。接着，建立软连接，使得Nodejs和npm命令可以在全局范围内使用。最后，通过查看版本号来验证安装是否成功。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang excel导出</title>
      <link>/article/golang-excel%E5%AF%BC%E5%87%BA/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/golang-excel%E5%AF%BC%E5%87%BA/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何使用Golang进行Excel文件的导出。它详细解释了如何使用excelize库创建一个新的Excel文件，并设置单元格的值。然后，它展示了如何将这个Excel文件作为一个下载响应发送给客户端。文章还提供了相关的Github和文档链接，供读者进一步学习和探索。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Golang 蓄水池抽样法</title>
      <link>/article/golang-%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E6%B3%95/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/golang-%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E6%B3%95/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何在Go语言中实现蓄水池抽样法。蓄水池抽样法是一种等概率随机抽取的方法，适用于从大量数据中抽取样本。文章首先构建了一个可以放置m个元素的蓄水池，然后将前m个数依次放入。从第m+1个元素开始，以m/n的概率决定元素是否被替换到池子中。当遍历完所有元素后，就可以得出随机挑选的k个元素。该方法的时间复杂度为O(n)。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>hexo博客迁移</title>
      <link>/article/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何迁移Hexo博客。首先，将原电脑上配置好的Hexo目录拷贝到新电脑，包括_config.yml、package.json、scaffolds/、source/和themes/等文件和目录。然后在新电脑上配置Hexo环境，包括安装Node.js和Hexo。接着，将博客中的node_modules设置为环境变量。最后，进入Hexo目录，安装模块并部署。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Mysql查询多个字段重复的值</title>
      <link>/article/mysql%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E9%87%8D%E5%A4%8D%E7%9A%84%E5%80%BC/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/mysql%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E9%87%8D%E5%A4%8D%E7%9A%84%E5%80%BC/</guid>
      <description>本文介绍了如何在MySQL中查询多个字段重复的值。文章提供了一段SQL查询语句，该语句可以从指定的表中找出在特定字段（字段1和字段2）上有重</description>
      
    </item>
    
    <item>
      <title>pcntl_fork 多进程</title>
      <link>/article/pcntl-fork-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/pcntl-fork-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了PHP的pcntl_fork函数，这是一个用于创建子进程的函数。文章详细解释了如何使用这个函数，并通过代码示例展示了其用法。文章还进行了一个实验，测试了在创建子进程后，是父进程先执行还是子进程先执行。实验结果显示，pcntl_fork会首先执行父进程的逻辑，然后再执行子进程的逻辑。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>PHP内容缓存Yac</title>
      <link>/article/php%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98yac/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/php%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98yac/</guid>
      <description>&lt;p&gt;这篇文章介绍了PHP内容缓存Yac的基本使用和安装方法。Yac是一个基于共享内存，无锁的内容缓存，主要应用于让PHP进程之间共享一些简单的数据和高效地缓存一些页面结果。文章详细介绍了如何下载和安装Yac，以及如何在php.ini中进行配置。同时，文章也列出了使用Yac的一些限制，例如缓存的键长度不超过48字节，缓存值不能超过60兆字节等。最后，文章通过一个简单的例子展示了如何在PHP中使用Yac进行数据的存取。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>supervisor管理golang程序</title>
      <link>/article/supervisor%E7%AE%A1%E7%90%86golang%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/supervisor%E7%AE%A1%E7%90%86golang%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;最近在鼓捣golang守护进程的实现，无意发现了supervisor这个有意思的东西。supervisor是一个unix的系统进程管理软件，可以用它来管理apache、nginx等服务，若服务挂了可以让它们自动重启。当然也可以用来实现golang的守护进程，下面描述下具体实现。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>utf8_bin和utf8_general_ci编码的区别</title>
      <link>/article/utf8-bin%E5%92%8Cutf8-general-ci%E7%BC%96%E7%A0%81%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/utf8-bin%E5%92%8Cutf8-general-ci%E7%BC%96%E7%A0%81%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;本文主要介绍了MySQL中utf8_bin和utf8_general_ci两种编码格式的区别。utf8_bin编码将字符串中的每个字符用二进制数据存储，区分大小写。而utf8_general_ci编码则不区分大小写，是utf8的默认编码。通过实例演示了在插入数据时，两种编码方式对大小写的处理差异。因此，在选择编码时，应注意这种区别。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>分析Mysql Binlog 日志</title>
      <link>/article/%E5%88%86%E6%9E%90mysql-binlog-%E6%97%A5%E5%BF%97/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/%E5%88%86%E6%9E%90mysql-binlog-%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;p&gt;这篇文章主要介绍了如何分析MySQL的Binlog日志。首先，我们需要确认mysqlbinlog命令是否存在。然后，文章提供了几种不同的命令来解析Binlog日志，包括全量解析、按时间范围解析、只解析某个数据库和只解析某个binlog文件。最后，文章解释了在解析过程中可能遇到的错误，这些错误可能是由于MySQL版本问题造成的，建议使用高于5.6版本的MySQL进行分析。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>博客导流公众号</title>
      <link>/article/%E5%8D%9A%E5%AE%A2%E5%AF%BC%E6%B5%81%E5%85%AC%E4%BC%97%E5%8F%B7/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/%E5%8D%9A%E5%AE%A2%E5%AF%BC%E6%B5%81%E5%85%AC%E4%BC%97%E5%8F%B7/</guid>
      <description>&lt;p&gt;这篇文章介绍了如何将博客导流到微信公众号。主要包括两个步骤：第一步是在微信公众号设置关键词回复，第二步是在博客文章页面末尾增加特定的js代码。这种方法可以帮助博客自然增长，同时也可以提高微信公众号的粉丝数量。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>跨域</title>
      <link>/article/%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/%E8%B7%A8%E5%9F%9F/</guid>
      <description>&lt;p&gt;这篇文章主要讨论了跨域的概念、同源策略及其限制，以及如何处理跨域问题。文章首先解释了什么是跨域，然后介绍了同源策略及其对Cookie、LocalStorage、IndexedDB等存储性内容、DOM节点和AJAX请求的限制。最后，文章详细介绍了CORS（跨源资源共享）的原理和优缺点，并提供了PHP代码示例，展示了如何在服务器端添加CORS头部和验证Referer以防止CSRF攻击。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>阿里云服务器搭建vpn</title>
      <link>/article/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAvpn/</link>
      <pubDate>Sat, 29 Aug 2020 07:47:20 +0800</pubDate>
      
      <guid>/article/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAvpn/</guid>
      <description>&lt;p&gt;本文提供了在阿里云服务器上设置VPN服务器的全面指南。它涵盖了Linux服务器的初始设置，IPsec VPN的安装，以及从iOS和Mac设备连接到VPN的详细说明。文章还提供了故障排除链接和进一步阅读的参考。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
